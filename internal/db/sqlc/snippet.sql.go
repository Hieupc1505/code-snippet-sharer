// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: snippet.sql

package db

import (
	"context"
)

const add = `-- name: Add :exec
INSERT INTO code_snippets (slug, title, snippet, lang, public, view_count)
VALUES ($1, $2, $3, $4, $5, $6)
`

type AddParams struct {
	Slug      string `json:"slug"`
	Title     string `json:"title"`
	Snippet   string `json:"snippet"`
	Lang      string `json:"lang"`
	Public    bool   `json:"public"`
	ViewCount int32  `json:"view_count"`
}

func (q *Queries) Add(ctx context.Context, arg AddParams) error {
	_, err := q.db.Exec(ctx, add,
		arg.Slug,
		arg.Title,
		arg.Snippet,
		arg.Lang,
		arg.Public,
		arg.ViewCount,
	)
	return err
}

const getBySlug = `-- name: GetBySlug :one
SELECT id, slug, title, snippet, lang, public, view_count, created_time, updated_time FROM code_snippets WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetBySlug(ctx context.Context, slug string) (CodeSnippet, error) {
	row := q.db.QueryRow(ctx, getBySlug, slug)
	var i CodeSnippet
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Snippet,
		&i.Lang,
		&i.Public,
		&i.ViewCount,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getPublicSnippets = `-- name: GetPublicSnippets :many
SELECT id, slug, title, snippet, lang, public, view_count, created_time, updated_time FROM code_snippets
WHERE public = TRUE
`

func (q *Queries) GetPublicSnippets(ctx context.Context) ([]CodeSnippet, error) {
	rows, err := q.db.Query(ctx, getPublicSnippets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CodeSnippet{}
	for rows.Next() {
		var i CodeSnippet
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Snippet,
			&i.Lang,
			&i.Public,
			&i.ViewCount,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentPosts = `-- name: GetRecentPosts :many
SELECT id, slug, title, snippet, lang, public, view_count, created_time, updated_time FROM code_snippets
ORDER BY created_time DESC
LIMIT 4
`

func (q *Queries) GetRecentPosts(ctx context.Context) ([]CodeSnippet, error) {
	rows, err := q.db.Query(ctx, getRecentPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CodeSnippet{}
	for rows.Next() {
		var i CodeSnippet
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Snippet,
			&i.Lang,
			&i.Public,
			&i.ViewCount,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateViewCount = `-- name: UpdateViewCount :exec
UPDATE code_snippets
SET view_count = view_count + 1
WHERE slug = $1
`

func (q *Queries) UpdateViewCount(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, updateViewCount, slug)
	return err
}
